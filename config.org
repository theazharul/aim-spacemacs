* Set personal information
  #+BEGIN_SRC emacs-lisp
  (setq user-full-name "Azhar Ibn Mostafiz")
  
  #+END_SRC


* Package Manager 
#+BEGIN_SRC emacs-lisp
(package-initialize)

(require 'package)

(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/") t)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq use-package-always-ensure t)
(setq use-package-verbose t)

#+END_SRC

* Common Config
** Color Theme
   #+BEGIN_SRC emacs-lisp

     ;; Download Zenburn-theme 
     (unless (package-installed-p 'zenburn-theme)
     (package-install 'zenburn-theme))
     ;; Enable Zenburn theme
     (load-theme 'zenburn t)

   #+END_SRC
** Font config
   #+BEGIN_SRC emacs-lisp
  
 ;; Set default font
 (set-face-attribute 'default nil
                     :family "Source Code Pro"
                     :height 150 
                     :weight 'normal
                     :width 'normal)
   #+END_SRC
** Menubar, Scrollbar, Toolbar config
   #+BEGIN_SRC emacs-lisp
  
 ;; Disable Menubar
 (menu-bar-mode -1) 
 ;; Disable Scrollbar
 (toggle-scroll-bar -1) 
 ;; Disable Toolbar
 (tool-bar-mode -1) 
   #+END_SRC
** Parenthesis Completion
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC

* Multiple cursor
  #+BEGIN_SRC emacs-lisp
  (use-package evil-mc 
  :config
  (global-evil-mc-mode  1))

  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :config
  (add-hook 'after-init-hook #'global-flycheck-mode))
  #+END_SRC

* Org Mode
** Basic config
  #+BEGIN_SRC emacs-lisp
  (use-package org
  :demand t
  :mode (("\\.org$" . org-mode))
  :init
  (setq org-agenda-files (list "~/Dropbox/org/"))
  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
  :config
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-switchb)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cw" 'org-time-stamp-inactive)
  (setq org-log-done t)
  (setq org-use-speed-commands t)
  (setq org-return-follows-link t)
  (setq org-enforce-todo-dependencies t)
  (setq org-habit-show-habits-only-for-today nil)
  (setq org-archive-location "~/Dropbox/org/archive/Archive.org::* From %s")
  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/Dropbox/org/Todo.org" "Todo")
           "* TODO %? \n  %^t")
          ("i" "Idea" entry (file+headline "~/Dropbox/org/Ideas.org" "Ideas")
           "* %? \n %U")
          ("l" "Learn" entry (file+headline "~/Dropbox/org/Learn.org" "Learn")
           "* %? \n")
          ("w" "Work note" entry (file+headline "~/Dropbox/org/work.org" "Work")
           "* %? \n")))
  (setq org-modules
        (quote
         (org-bbdb org-bibtex org-docview org-gnus org-habit org-info org-irc org-mhe org-rmail org-w3m))))


  #+END_SRC


** Org-bullet
  #+BEGIN_SRC emacs-lisp

 (use-package org-bullets 
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))) 

  #+END_SRC
** Org Journal
   #+BEGIN_SRC emacs-lisp
   
(use-package org-journal)

   #+END_SRC
** Org Projectile
#+BEGIN_SRC emacs-lisp

(use-package org-projectile
  :after org
  :after projectile
  :config
  (setq org-projectile-projects-file
        "~/.org/project_todos.org")
  (push (org-projectile-project-todo-entry) org-capture-templates)
  (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
  (global-set-key (kbd "C-c n p") 'org-projectile-project-todo-completing-read))
#+END_SRC

* Htmlize
  #+BEGIN_SRC emacs-lisp
  (use-package htmlize)
  #+END_SRC

* Evil
  #+BEGIN_SRC emacs-lisp
  (use-package evil
  :config
  (evil-mode 1))
  #+END_SRC

* Evil Surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))
#+END_SRC

* IVY
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
    :init (ivy-mode 1)
    :config
    (setq ivy-height 10)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (global-set-key "\C-s" 'swiper)
    (setq projectile-completion-system 'ivy)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "C-c e e") 'counsel-ag))
  #+END_SRC

* Company Mode
  #+BEGIN_SRC emacs-lisp
  (use-package company
  :config
  (global-company-mode)
  (setq company-tooltip-align-annotations t))
  #+END_SRC

* NeoTree
  #+BEGIN_SRC emacs-lisp
  (use-package neotree
  :config
  (global-set-key [f8] 'neotree-toggle)
  (global-set-key [f9] 'neotree-dir)
  (setq neo-smart-open t)
  (add-hook 'neotree-mode-hook
              (lambda ()
                (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
                (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
                (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
                (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
                (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
                (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
                (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
                (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle))))
  #+END_SRC


* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
    (setq projectile-switch-project-action 'neotree-projectile-action)
  #+END_SRC

* Yasnippet
  #+BEGIN_SRC emacs-lisp
  (use-package yasnippet
  :config
  (yas-global-mode +1))
  
  (use-package yasnippet-snippets
  :ensure t
  :after (yasnippet))
  #+END_SRC

* Magit
  #+BEGIN_SRC emacs-lisp
  (use-package magit
  :config
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
  (global-magit-file-mode 1))
  #+END_SRC

* Restclient
  #+BEGIN_SRC emacs-lisp
  (use-package restclient)
  #+END_SRC

* Web Mode
  #+BEGIN_SRC emacs-lisp
  (use-package web-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.eex?\\'" . web-mode)))
  #+END_SRC

* JavaScript
  #+BEGIN_SRC emacs-lisp
  (use-package js2-mode
  :mode "\\.js\\'")

  (use-package typescript-mode
  :mode  ("\\.ts\\'" "\\.tsx\\'"))

  (setq css-indent-offset 2)

  (use-package prettier-js
  :config
  (add-hook 'js2-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook #'(lambda ()
                               (enable-minor-mode
                                '(("\\.jsx?\\'" "\\.ts\\'" "\\.tsx\\'") . prettier-js-mode))))
  (add-hook 'typescript-mode-hook 'prettier-js-mode))
  #+END_SRC

* Elixir Config
** Install elixir-ls
***    Clone the elixir-lsp elixir-ls fork locally
***  ~git clone https://github.com/elixir-lsp/elixir-ls.git~
***    ~cd elixir-ls~ (that you just cloned)
***    ~mix deps.get~
***    ~mix elixir_ls.release~
    This will create a release/language_server.sh (and .bat for windows) file that you will need for the Emacs integration, so note down this path (referred to later as path-to-elixir-ls/release).

**  Eglot
  #+BEGIN_SRC emacs-lisp



  (use-package flycheck-credo
  :requires flycheck
  :config
  (flycheck-credo-setup))

  (use-package elixir-mode
  :config
  (add-hook 'elixir-mode-hook 'flycheck-mode)
  (add-hook 'elixir-mode-hook
            (lambda () (add-hook 'before-save-hook 'elixir-format nil t)))
  (add-hook 'elixir-format-hook (lambda ()
                                  (if (projectile-project-p)
                                      (setq elixir-format-arguments
                                            (list "--dot-formatter"
                                                  (concat (locate-dominating-file buffer-file-name ".formatter.exs") ".formatter.exs")))
                                    (setq elixir-format-arguments nil)))))


  (use-package eglot
  :config
  ;; This is optional. It automatically runs `M-x eglot` for you whenever you are in `elixir-mode`
  (add-hook 'elixir-mode-hook 'eglot-ensure)

  (add-to-list 'eglot-server-programs `(elixir-mode "~/elixir-ls/release/language_server.sh")))
  
  (use-package exunit)

  #+END_SRC

* Rust
  #+BEGIN_SRC emacs-lisp
  (use-package rust-mode
  :config
  (add-hook 'racer-mode-hook #'eldoc-mode)
  (add-hook 'racer-mode-hook #'company-mode)
  (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
  (setq rust-format-on-save t)
  (setq rust-indent-offset 4))

(use-package cargo
  :requires rust-mode
  :config
  (add-hook 'rust-mode-hook 'cargo-minor-mode))

  (use-package racer
  :requires rust-mode

  :init (setq racer-rust-src-path
              (concat (string-trim
                       (shell-command-to-string "rustc --print sysroot"))
                      "/lib/rustlib/src/rust/src"))
  :after rust-mode
  :config
  (add-hook 'rust-mode-hook #'racer-mode))
  #+END_SRC
